* Bài 3:
    - Cách cài đặt và chạy file .ts (TypeScript)

* Bài 4:
    - Phân biệt giữa cách chạy Javascript và TypeScript.
        + Javascript lúc code nếu có lỗi sẽ không báo lên code và lúc chạy nếu có lỗi mới báo
        , còn TypeScript nếu trong lúc code có lỗi sẽ báo trực tiếp -> code TypeScript sẽ tiết kiệm
        thời gian hơn

* Bài 5:
    - Khi chúng ta làm việc với thèn TypeScript chúng ta cần quan tâm đến kiểu dữ liệu là gì
    nhờ có kiểu dữ liệu thì thèn TypeScript mới biết được rằng là chúng ta muốn sử dụng cái dữ liệu
    đấy và chúng ta có bao nhiêu thuộc tính và chúng ta có những phương thức nào có sẵn
    ứng với kiểu dữ liệu đấy.


* Bài 6:
    - Lúc khai báo biến:
        + Biến let không cần gán giá trị trước, còn biến const bắt buộc phải gán giá trị khi khai báo



* Bài 7:
    - Bài này là TypeScript sẽ tự động gán kiểu dữ liệu cho chúng ta


* Bài 8:
    - Hướng dẫn cách sử dụng dấu nháy


* Bài 11:
    - Để khai báo TypeScript là 1 object ta cần dấu 2 chấm và kiểu dữ liệu hình thành cho nó và đồng thời sẽ gán giá trị luôn


* Bài 12:
    - Đối với thèn array của thèn TypeScript nếu muốn định nghĩa type nó giống hết như dùng number hay string thôi tuy nhiên chúng ta dùng dấu đóng mở ngoặc vuông
    cho nhanh, đồng thời chúng ta có thể dùng mix type (nghĩa là dùng tùm lum kiểu dữ liệu trong 1 mảng)
    
    (string | number)[]

* Bài 13: 
    - Kiểu tuple giúp chúng ta định nghĩa được 1 mảng hay rằng chúng ta định nghĩa được
    1 cái biến mà ở đấy mình quy định kiểu giá trị cũng như rằng là trình tự hay kích thước của
    biến đấy


* Bài 14: Biến `enum`
    - Trong TypeScript, enum (viết tắt của "enumeration") là một kiểu dữ liệu đặc biệt cho phép bạn
     xác định tập hợp các hằng số có tên. Enums giúp mã trở nên dễ đọc và duy trì hơn bằng cách 
     sử dụng các tên có ý nghĩa thay vì các giá trị số hoặc chuỗi.
    
    - Định nghĩa:
        + Enums là một cách để đặt tên cho các tập hợp các giá trị liên quan và chúng cung cấp một cách 
        thuận tiện để làm việc với các nhóm các hằng số có liên quan. Enums có thể được định nghĩa bằng 
        cách sử dụng từ khóa `enum`.


*Bài 15: `TypeScript Any Type`
    - TypeScript cung cấp kiểu `any` để cho phép bạn làm việc với các giá trị có thể có bất kỳ kiểu nào. 
    Điều này đặc biệt hữu ích trong các tình huống mà bạn không biết trước kiểu dữ liệu chính xác, 
    chẳng hạn như khi làm việc với dữ liệu từ các API hoặc thư viện bên ngoài.

    - Giới thiệu về `any`:
        + `any` là một kiểu dữ liệu động, tương tự như kiểu Object trong JavaScript.
        + Sử dụng `any` loại bỏ sự kiểm tra kiểu của TypeScript, cho phép bạn gán và sử dụng giá trị mà không gặp lỗi kiểu.
        + Nó hữu ích trong các trường hợp bạn cần tạm thời vô hiệu hóa kiểm tra kiểu hoặc làm việc với các giá trị không xác định.
    

    -Lưu ý khi sử dụng `any`:
        + Sử dụng có kiểm soát: `any` có thể làm mất đi lợi ích chính của TypeScript là kiểm tra kiểu tĩnh. Do đó, nên sử dụng any một cách hạn chế và có kiểm soát.
        + Khi cần sự linh hoạt: any hữu ích khi làm việc với các giá trị không xác định, nhưng khi có thể, hãy chuyển sang các kiểu cụ thể hơn để tận dụng kiểm tra kiểu của TypeScript.


* Bài 16: `TypeScript Void Type`
    - TypeScript là một ngôn ngữ lập trình phát triển từ JavaScript với nhiều tính năng mạnh mẽ, trong đó 
    có hệ thống kiểu tĩnh. Một trong những kiểu dữ liệu trong TypeScript là void. Kiểu void thường 
    được sử dụng để biểu thị rằng một hàm không trả về giá trị nào.

    - Khi nào sử dụng void:
        + Hàm không trả về giá trị: Khi bạn viết một hàm không trả về giá trị, bạn có thể khai báo kiểu trả về của hàm là void.
        + Hàm chỉ thực hiện một số hành động: Những hàm như log thông tin, gửi dữ liệu đến một server mà không cần trả về bất kỳ giá trị nào.



* Bài 17: TypeScript Data Type - Never
    - Trong TypeScript, never là một kiểu dữ liệu đặc biệt dùng để chỉ những giá trị không bao giờ xảy ra. never thường được sử dụng để:
        + Chỉ các hàm không bao giờ trả về (chẳng hạn như các hàm ném ra ngoại lệ hoặc các hàm có vòng lặp vô tận).
        + Chỉ các biến mà về lý thuyết không thể có giá trị nào.

    - Khi nào sử dụng never? :
        + Hàm ném ra ngoại lệ: Khi một hàm luôn ném ra ngoại lệ và không bao giờ hoàn thành việc thực thi bình thường.
        + Hàm có vòng lặp vô tận: Khi một hàm có vòng lặp vô tận mà không có cách nào để thoát khỏi vòng lặp.



* Bài 18: TypeScript Union Type
    - Trong TypeScript, Union Type cho phép một biến có thể có nhiều kiểu dữ liệu. Điều này rất hữu ích khi bạn muốn một biến có thể chứa giá trị thuộc nhiều kiểu khác nhau.
    - Union Type được định nghĩa bằng cách sử dụng ký hiệu dấu gạch đứng (|). Ví dụ, nếu bạn muốn một biến có thể là string hoặc number, bạn có thể khai báo như sau:
        + let value: string | number;


